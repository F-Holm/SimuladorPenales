// Definición de pines para botones y LEDs
const int buttonPins[9] = {2, 3, 4, 5, 6, 7, 8, 9, 10};
const int ledPins[18] = {11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28};

char board[9] = {' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
char currentPlayer = 'X';
bool gameOver = false;

void setup() {
  for (int i = 0; i < 9; i++) {
    pinMode(buttonPins[i], INPUT);
    pinMode(ledPins[i], OUTPUT);
    pinMode(ledPins[i]+9, OUTPUT);
  }
  Serial.begin(9600);
  updateBoard();
}

void loop() {
  if (!gameOver) {
    for (int i = 0; i < 9; i++) {
      if (digitalRead(buttonPins[i]) == HIGH && board[i] == ' ') {
        board[i] = currentPlayer;
        updateBoard();
        checkWinner();
        if (!gameOver) {
          currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
        }
        delay(300); // Debounce delay
      }
    }
  }
}

void updateBoard() {
  for (int i = 0; i < 9; i++) {
    digitalWrite(ledPins[i], (board[i] == 'X') ? HIGH : LOW);
    digitalWrite(ledPins[i] + 9, (board[i] == 'O') ? HIGH : LOW);
  }
}

void checkWinner() {
  // Check rows, columns, and diagonals for a winner
  for (int i = 0; i < 3; i++) {
    if (board[i] != ' ' && board[i] == board[i + 3] && board[i] == board[i + 6]) {
      gameOver = true;
      blinkWinner(i, i + 3, i + 6);
      Serial.println(board[i] == 'X' ? "¡El jugador X ha ganado!" : "¡El jugador O ha ganado!");
      return;
    }
    if (board[i * 3] != ' ' && board[i * 3] == board[i * 3 + 1] && board[i * 3] == board[i * 3 + 2]) {
      gameOver = true;
      blinkWinner(i * 3, i * 3 + 1, i * 3 + 2);
      Serial.println(board[i * 3] == 'X' ? "¡El jugador X ha ganado!" : "¡El jugador O ha ganado!");
      return;
    }
  }
  if (board[0] != ' ' && board[0] == board[4] && board[0] == board[8]) {
    gameOver = true;
    blinkWinner(0, 4, 8);
    Serial.println(board[0] == 'X' ? "¡El jugador X ha ganado!" : "¡El jugador O ha ganado!");
    return;
  }
  if (board[2] != ' ' && board[2] == board[4] && board[2] == board[6]) {
    gameOver = true;
    blinkWinner(2, 4, 6);
    Serial.println(board[2] == 'X' ? "¡El jugador X ha ganado!" : "¡El jugador O ha ganado!");
    return;
  }
  // Check for a draw
  if (!gameOver) {
    bool draw = true;
    for (int i = 0; i < 9; i++) {
      if (board[i] == ' ') {
        draw = false;
        break;
      }
    }
    if (draw) {
      gameOver = true;
      blinkDraw();
      Serial.println("¡El juego ha terminado en empate!");
    }
  }
}


void blinkWinner(int a, int b, int c) {
  for (int i = 0; i < 5; i++) {
    digitalWrite(ledPins[a], HIGH);
    digitalWrite(ledPins[b], HIGH);
    digitalWrite(ledPins[c], HIGH);
    delay(300);
    digitalWrite(ledPins[a], LOW);
    digitalWrite(ledPins[b], LOW);
    digitalWrite(ledPins[c], LOW);
    delay(300);
  }
}

void blinkDraw() {
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 9; j++) {
      digitalWrite(ledPins[j], HIGH);
    }
    delay(300);
    for (int j = 0; j < 9; j++) {
      digitalWrite(ledPins[j], LOW);
    }
    delay(300);
  }
}
